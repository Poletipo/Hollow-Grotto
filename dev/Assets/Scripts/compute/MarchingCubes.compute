// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "/includes/MarchTables.compute"

struct Triangle {
    float3 corner1;
    float3 corner2;
    float3 corner3;
};

struct Point {
    float3 pos;
    float val;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<Point> points;

int numPointsPerAxis;
float Threshold;


float3 InterpolateVerts(Point v1, Point v2) {
    float t = (Threshold - v1.val) / (v2.val - v1.val);
    return v1.pos + t * (v2.pos - v1.pos);
}

int indexFromCoord(int x, int y, int z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

[numthreads(10,10,10)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis - 1 || id.y >= numPointsPerAxis - 1 || id.z >= numPointsPerAxis - 1) {
        return;
    }

    Point cubeCorner[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x + 1,id.y + 1, id.z)]
    };

    int cubeindex = 0;
    if (cubeCorner[0].val < Threshold) cubeindex |= 1;
    if (cubeCorner[1].val < Threshold) cubeindex |= 2;
    if (cubeCorner[2].val < Threshold) cubeindex |= 4;
    if (cubeCorner[3].val < Threshold) cubeindex |= 8;
    if (cubeCorner[4].val < Threshold) cubeindex |= 16;
    if (cubeCorner[5].val < Threshold) cubeindex |= 32;
    if (cubeCorner[6].val < Threshold) cubeindex |= 64;
    if (cubeCorner[7].val < Threshold) cubeindex |= 128;

    if (edgeTable[cubeindex] == 0) {
        return;
    }
    float3 vertlist[12];
    if ((edgeTable[cubeindex] & 1) != 0)
        vertlist[0] = InterpolateVerts(cubeCorner[0], cubeCorner[1]);
    if ((edgeTable[cubeindex] & 2) != 0)
        vertlist[1] = InterpolateVerts(cubeCorner[1], cubeCorner[2]);
    if ((edgeTable[cubeindex] & 4) != 0)
        vertlist[2] = InterpolateVerts(cubeCorner[2], cubeCorner[3]);
    if ((edgeTable[cubeindex] & 8) != 0)
        vertlist[3] = InterpolateVerts(cubeCorner[3], cubeCorner[0]);
    if ((edgeTable[cubeindex] & 16) != 0)
        vertlist[4] = InterpolateVerts(cubeCorner[4], cubeCorner[5]);
    if ((edgeTable[cubeindex] & 32) != 0)
        vertlist[5] = InterpolateVerts(cubeCorner[5], cubeCorner[6]);
    if ((edgeTable[cubeindex] & 64) != 0)
        vertlist[6] = InterpolateVerts(cubeCorner[6], cubeCorner[7]);
    if ((edgeTable[cubeindex] & 128) != 0)
        vertlist[7] = InterpolateVerts(cubeCorner[7], cubeCorner[4]);
    if ((edgeTable[cubeindex] & 256) != 0)
        vertlist[8] = InterpolateVerts(cubeCorner[0], cubeCorner[4]);
    if ((edgeTable[cubeindex] & 512) != 0)
        vertlist[9] = InterpolateVerts(cubeCorner[1], cubeCorner[5]);
    if ((edgeTable[cubeindex] & 1024) != 0)
        vertlist[10] = InterpolateVerts(cubeCorner[2], cubeCorner[6]);
    if ((edgeTable[cubeindex] & 2048) != 0)
        vertlist[11] = InterpolateVerts(cubeCorner[3], cubeCorner[7]);

    for (int i = 0; triTable[cubeindex][i] != -1; i+=3) {

        Triangle tri;
        tri.corner1 = vertlist[triTable[cubeindex][i]];
        tri.corner2 = vertlist[triTable[cubeindex][i+1]];
        tri.corner3 = vertlist[triTable[cubeindex][i+2]];

        triangles.Append(tri);

    }


    // Create triangles for current cube configuration
    //for (int i = 0; triTable[cubeindex][i] != -1; i += 3) {
    //    // Get indices of corner points A and B for each of the three edges
    //    // of the cube that need to be joined to form the triangle.
    //    int a0 = cornerIndexAFromEdge[triTable[cubeindex][i]];
    //    int b0 = cornerIndexBFromEdge[triTable[cubeindex][i]];

    //    int a1 = cornerIndexAFromEdge[triTable[cubeindex][i + 1]];
    //    int b1 = cornerIndexBFromEdge[triTable[cubeindex][i + 1]];

    //    int a2 = cornerIndexAFromEdge[triTable[cubeindex][i + 2]];
    //    int b2 = cornerIndexBFromEdge[triTable[cubeindex][i + 2]];

    //    Triangle tri;
    //    tri.corner1 = InterpolateVerts(cubeCorner[a0], cubeCorner[b0]);
    //    tri.corner2 = InterpolateVerts(cubeCorner[a1], cubeCorner[b1]);
    //    tri.corner3 = InterpolateVerts(cubeCorner[a2], cubeCorner[b2]);
    //    triangles.Append(tri);
    //}




}
