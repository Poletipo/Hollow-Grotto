// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "/MarchTables.compute"

AppendStructuredBuffer<float3> vertices;
RWStructuredBuffer<float4> points;

int numPointsPerAxis;
float Threshold;


float3 InterpolateVerts(float4 v1, float4 v2) {
    float t = (Threshold - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz - v1.xyz);
}

int indexFromCoord(int x, int y, int z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis - 1 || id.y >= numPointsPerAxis - 1 || id.z >= numPointsPerAxis - 1) {
        return;
    }

    float4 cubeCorner[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x + 1,id.y + 1, id.z)]
    };

    int cubeindex = 0;
    if (cubeCorner[0].w < Threshold) cubeindex |= 1;
    if (cubeCorner[1].w < Threshold) cubeindex |= 2;
    if (cubeCorner[2].w < Threshold) cubeindex |= 4;
    if (cubeCorner[3].w < Threshold) cubeindex |= 8;
    if (cubeCorner[4].w < Threshold) cubeindex |= 16;
    if (cubeCorner[5].w < Threshold) cubeindex |= 32;
    if (cubeCorner[6].w < Threshold) cubeindex |= 64;
    if (cubeCorner[7].w < Threshold) cubeindex |= 128;

    if (edgeTable[cubeindex] == 0) {
        return;
    }
    float3 vertlist[12];
    if ((edgeTable[cubeindex] & 1) != 0)
        vertlist[0] = InterpolateVerts(cubeCorner[0], cubeCorner[1]);
    if ((edgeTable[cubeindex] & 2) != 0)
        vertlist[1] = InterpolateVerts(cubeCorner[1], cubeCorner[2]);
    if ((edgeTable[cubeindex] & 4) != 0)
        vertlist[2] = InterpolateVerts(cubeCorner[2], cubeCorner[3]);
    if ((edgeTable[cubeindex] & 8) != 0)
        vertlist[3] = InterpolateVerts(cubeCorner[3], cubeCorner[0]);
    if ((edgeTable[cubeindex] & 16) != 0)
        vertlist[4] = InterpolateVerts(cubeCorner[4], cubeCorner[5]);
    if ((edgeTable[cubeindex] & 32) != 0)
        vertlist[5] = InterpolateVerts(cubeCorner[5], cubeCorner[6]);
    if ((edgeTable[cubeindex] & 64) != 0)
        vertlist[6] = InterpolateVerts(cubeCorner[6], cubeCorner[7]);
    if ((edgeTable[cubeindex] & 128) != 0)
        vertlist[7] = InterpolateVerts(cubeCorner[7], cubeCorner[4]);
    if ((edgeTable[cubeindex] & 256) != 0)
        vertlist[8] = InterpolateVerts(cubeCorner[0], cubeCorner[4]);
    if ((edgeTable[cubeindex] & 512) != 0)
        vertlist[9] = InterpolateVerts(cubeCorner[1], cubeCorner[5]);
    if ((edgeTable[cubeindex] & 1024) != 0)
        vertlist[10] = InterpolateVerts(cubeCorner[2], cubeCorner[6]);
    if ((edgeTable[cubeindex] & 2048) != 0)
        vertlist[11] = InterpolateVerts(cubeCorner[3], cubeCorner[7]);

    for (int i = 0; triTable[cubeindex][i] != -1; i++) {
        vertices.Append(vertlist[triTable[cubeindex][i]]);
    }

}
